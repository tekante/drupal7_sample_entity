<?php

/**
 * hook_entity_info
 */
function sample_entity_info() {
  return array(
    'sample' => array(
      'module' => 'sample', // entity module key, this allows the entity module to automatically describe the base table to views
      'label' => t('Sample'),
      'controller class' => 'EntityApiController', // use the controller provided by the entity module instead of the default
      'entity class' => 'SampleEntity', // entity module key, for identifying the class responsible for this entity
      'base table' => 'sample',
      'revision table' => 'sample_revision',
      //'static cache' => TRUE, // this is the default
      //'field cache' => TRUE, // this is the default
      'load hook' => 'sample_load', // function to use to load data for this entity
      'uri callback' => 'entity_class_uri', // let the uri be determined by the defaultUri method of the entity's class
      'label callback' => 'entity_class_label', // let the label be determined by the defaultLabel method of the entity's class
      'fieldable' => TRUE, // let this entity be extended with fields
      'entity keys' => array( // give field api the info it needs to interact with the entity
        'label' => 'mech_name', // the property that contains the name for each instance of this entity
        'id' => 'sid', // the property that uniquely identifies this entity (must be numeric)
        'revision' => 'rev_id', // if the entity keeps revisions, the property identifying the revision id
        //'bundle' => 'type', // if the entity has multiple bundles, the property that identifies the bundle, type is the bundle for the node entity as an example
      ),
      'admin ui' => array( // entity module key
        'path' => 'sample', // path that will be used for listing instances of this entity and as a base for adding, editing, deleting and cloning
      ),
      'access callback' => 'sample_access', // entity module key, access callback for this entity  
      /* if the paths defined in the bundle section contain wildcards indicating a loadable object this indicates the property
         of the bundle necessary to construct the real path
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      */
      'bundles' => array( // if you have only one bundle, then key it based on your entity key
        'sample' => array(
          'label' => t('Default Bundle'), // human readable name
          'admin' => array(
            'path' => 'admin/structure/sample', // a path you'll define in hook menu later for the admin page of this bundle, this is where the manage fields tabs will get tacked on if this is a fieldable entity
            //'real path' => 'admin/structure/sample/sample', // if path were admin/structure/sample/%sample_type then this would be required and the second sample would represent the bundle key, this is useful for entities which allow dynamic bundle creation
            //'bundle argument' => 3, // if real path is used, point at the arg which represents the bundle
            //'access callback' => 'user_access', // user access is the default
            'access arguments' => array('administer site configuration'), // probably best to define an explicit permission for controlling the structure of this entity, for node this is 'administer content types'
          ),
        ),
      ),
      'view modes' => array( // define what viewing modes your entity will support
        'full' => array( // key for the view mode
          'label' => t('Full'), // human readable name
          'custom settings' => FALSE, // use custom settings for this view mode out of the box, FALSE indicates to use the implicit default settings
          // see the node_add_body_field function in node.module and look at the display portion of each entity for an idea of how this is used, note the default and teaser keys
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * define the loadng function specified in the load hook key in sample_entity_info
 * TODO: need to determine what should be returned if the id doesn't exist
 */
function sample_load($sample_id = NULL, $reset = FALSE) {
  $ids = (isset($sample_id) ? array($sample_id) : array());
  $samples = sample_load_multiple($ids, NULL, $reset);
  return $samples[$sample_id];
}

/**
 * define a function for loading multiple entities at once so entity_load can be leveraged
 */
function sample_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('sample', $ids, $conditions, $reset);
}

/**
 * define the function specified in the uri callback key in sample_entity_info
 * this needs to match up with a hook menu path defined for showing the details of an entity
 */
function sample_uri($sample_entity_instance) {
  return array('path' => 'sample/' . $sample_entity_instance->sid);
}

/**
 * hook menu
 */
function sample_menu() {
  return array(
    // the admin path for the entity, must match with the path for one of your bundles
    'admin/structure/sample' => array(
      'title' => 'Administer Sample Structure',
      'description' => 'Adjust the structure of the sample entity, add fields, etc. Similar to manage content types for nodes',
      'page callback' => 'sample_admin',
      'access arguments' => array('administer site configuration'),
    ),
    'sample/%sample' => array(
      'title callback' => 'sample_title',
      'title arguments' => array(1),
      'description' => 'View an instance of this entity, this is node/%node for nodes',
      'page callback' => 'sample_view',
      'page arguments' => array(1),
      'access arguments' => array('view sample'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * administration page for this entity (or a specific bundle if your entity supports them)
 */
function sample_admin() {
  return t('Sample Admin Page');
}

/**
 * view your entity, wrapper for entity_view which doesn't accept single entities as input
 */
function sample_view($sample) {
  return $sample->view();
  // show how theme('sample') can also be used
  //return theme('sample', array('sample' => $sample, 'elements' => $sample->buildContent()));
}

/**
 * hook_theme
 */
function sample_theme($existing, $type, $theme, $path) {
  return array(
    // the entity theme adds theme hook suggestions that allow entity specific
    // themes to get subbed in, see template_preprocess_entity, suggestions are
    // of form: type, type__bundle, type__bundle__view_mode, type__id
    // when taking advantage of the entity theme and suggestions
    // preprocessing of entity specific variables needs to happen in
    // hook_preprocess_entity, search for sample_sample_view_alter to see how to
    // switch so that preprocessing happens in hook_preprocess_sample
    'sample' => array(
      // sample is the entity object and content is a build array
      // for any attached fields
      // this is set up so that someone calling theme('sample' . . . can
      // get the same variables in the template that may be expected after
      // entity theme preprocessing, coordinates with template_preprocess_sample
      // template_preprocess_entity
      'variables' => array('sample' => NULL, 'view_mode' => 'full', 'elements' => array()),
      'path' => $path . '/theme',
      'template' => 'sample',
    ),
  );
}

/**
 * hook preprocess, set up so that theme('sample', ...) can be used, generally
 * this won't be necessary as the entity theme and preprocessing offers
 * good access to entity type specific templates
 * see template_preprocess_entity for origin of this code
 */
function template_preprocess_sample(&$variables) {
  $entity_type = 'sample';
  $variables['entity_type'] = $entity_type;
  $entity = $variables['sample'];
  $info = entity_get_info($entity_type);

  $variables['title'] = check_plain(entity_label($entity_type, $entity));
  $uri = entity_uri($entity_type, $entity);
  $variables['url'] = $uri ? url($uri['path'], $uri['options']) : FALSE;
  $variables['page'] = $uri && $uri['path'] == $_GET['q'];

  $variables['content'] = array();
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  if (!empty($info['fieldable'])) {
    // Make the field variables available with the appropriate language.
    field_attach_preprocess($entity_type, $entity, $variables['content'], $variables);
  }
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Gather css classes.
  $variables['classes_array'][] = drupal_html_class('entity-' . $entity_type);
  $variables['classes_array'][] = drupal_html_class($entity_type . '-' . $bundle);

  // Add RDF type and about URI.
  if (module_exists('rdf')) {
    $variables['attributes_array']['about'] = empty($uri['path']) ? NULL: url($uri['path']);
    $variables['attributes_array']['typeof'] = empty($entity->rdf_mapping['rdftype']) ? NULL : $entity->rdf_mapping['rdftype'];
  }
}

/**
 * define a title callback specified in hook menu
 */
function sample_title($sample) {
  drupal_set_title($sample->label());
}

/**
 * form for adding/editing an entity
 */
function sample_form($form, &$form_state, $sample, $op, $entity_type) {
  if ($sample->sid && $op != 'clone') {
    $form['sid'] = array(
      '#type' => 'hidden',
      '#default_value' => $sample->sid,
    );
    // entity revision patch looks to the revision property on an entity to determine whether 
    // to create a new revision, key the checkbox to make creating the entity from the form
    // state values convenient
    $form['revision'] = array(
      '#type' => 'checkbox',
      '#title' => t('New Revision'),
      '#description' => t('Create a new revision'),
    );
  }

  if ($sample->rev_id) {
    $form['rev_id'] = array(
      '#type' => 'hidden',
      '#default_value' => $sample->rev_id,
    );
  }

  $form['mech_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine Name'),
    '#description' => t('The machine name for this instance'),
    '#max_length' => 50,
    '#default_value' => $sample->mech_name,
  );

  $form['message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message'),
    '#description' => t('Some data you care about saving'),
    '#max_length' => 50,
    '#default_value' => $sample->message,
  );

  field_attach_form('sample', $sample, $form, $form_state);
  $form['submit'] = array(
    '#type' => 'submit',
    '#default_value' => t('Save'),
  );
  return $form;
}

/**
 * validate callback for sample entity editing form
 */
function sample_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['sid'])) {
    $sample = sample_load($form_state['values']['sid']);
  }
  else {
    $sample = entity_create('sample', array());
  }
  field_attach_form_validate('sample', $sample, $form, $form_state);
}

/**
 * the submit handler
 */
function sample_form_submit($form, &$form_state) {
  $sample = entity_create('sample', $form_state['values']);
  // entity_create always returns a "new" object, make adjustments for that
  if (isset($form_state['values']['sid']) && !empty($form_state['values']['sid'])) {
    unset($sample->is_new);
  }
  field_attach_submit('sample', $sample, $form, $form_state);
  $sample->save();
  $form_state['redirect'] = $sample->uri();
}

/**
 * alter build array to switch the theme, form is {$entity_type}_view
 * if doing this refer to template_preprocess_entity
function sample_sample_view_alter(&$build, $entity_type) {
  $build['#theme'] = $entity_type;
}
 */

/**
 * hook permission
 */
function sample_permission() {
  // structure permissions to make it easy for the access callback defined
  // in sample_entity_info to coordinate with the ops that will be sent by
  // entity module to this callback
  $list = array('create' => 'Create new',
    'update' => 'Edit any',
    'delete' => 'Delete any',
    'view' => 'View any',
  );
  $perms = array();
  foreach ($list as $op => $label) {
    $perms[$op . ' sample'] = array(
      'title' => t('@label sample', array('@label' => $label)),
    );
  }
  return $perms;
}

/**
 * hook field extra fields, let the data items of this entity be managed and ordered as though they were fields
 */
function sample_field_extra_fields() {
  $return['sample']['sample']['form'] = array(
    'mech_name' => array(
      'label' => t('Machine Name'),
      'description' => t('Machine Name'),
      'weight' => -20,
    ),
    'message' => array(
      'label' => t('Message'),
      'description' => t('Message'),
      'weight' => -10,
    ),
  );
  $return['sample']['sample']['display'] = $return['sample']['sample']['form'];
  return $return;
}

/**
 * access callback defined in sample_entity_info, the entity module calls this when determining access
 */
function sample_access($op, $entity, $account = NULL, $entity_type = NULL) {
  return user_access($op . ' ' . $entity_type, $account);
}
